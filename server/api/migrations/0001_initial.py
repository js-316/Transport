# Generated by Django 5.0.6 on 2024-06-27 14:39

import api.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('phone_number', models.CharField(max_length=20)),
                ('age', models.IntegerField()),
                ('date_hired', models.DateField()),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_name', models.CharField(default='Hass', max_length=20)),
                ('loading_point', models.CharField(default='Mulago', max_length=20)),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_chief_transport_officer', models.BooleanField(default=False)),
                ('is_driver', models.BooleanField(default=False)),
                ('is_engineer', models.BooleanField(default=False)),
                ('is_human_resource_manager', models.BooleanField(default=False)),
                ('is_procurement_manager', models.BooleanField(default=False)),
                ('is_chief_executive_officer', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehichle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_plate', models.CharField(max_length=20, unique=True)),
                ('mileage', models.IntegerField()),
                ('manufacturer', models.CharField(max_length=50)),
                ('date_of_purchase', models.DateField()),
                ('vehichle_type', models.CharField(default='Truck', max_length=50)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehichles', to='api.driver')),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('cost', models.FloatField(default=20000)),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('more_information', models.CharField(default='Extra information', max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='maintenance_photos')),
                ('assigned_engineer', models.ForeignKey(default=12, on_delete=django.db.models.deletion.CASCADE, related_name='assignedEngineer', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(default=4, on_delete=django.db.models.deletion.CASCADE, related_name='driver_request', to=settings.AUTH_USER_MODEL)),
                ('fleet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenances', to='api.vehichle')),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='Jobcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_name', models.CharField(max_length=20)),
                ('date_of_jobcard', models.DateField()),
                ('parts_needed', models.CharField(max_length=50)),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('repair', models.ForeignKey(default=55, on_delete=django.db.models.deletion.CASCADE, related_name='repair', to='api.maintenance')),
                ('jobcard_plate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobcards', to='api.vehichle')),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='Fuel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel_type', models.CharField(default='Petrol', max_length=20)),
                ('date_of_fueling', models.DateField()),
                ('amount', models.FloatField()),
                ('mileage', models.FloatField()),
                ('project', models.CharField(default='CSQUARED', max_length=25)),
                ('status', models.CharField(default='Pending', max_length=20)),
                ('location', models.CharField(default='Location', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userfuel', to=settings.AUTH_USER_MODEL)),
                ('fuel_station', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='fuel_station', to='api.station')),
                ('fuel_plate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel', to='api.vehichle')),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
        migrations.CreateModel(
            name='Engineer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=20)),
                ('age', models.IntegerField()),
                ('date_hired', models.DateField()),
                ('email', models.CharField(max_length=30)),
                ('vehichle_attached', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engineers', to='api.vehichle')),
            ],
            bases=(models.Model, api.models.ExtraMixin),
        ),
    ]
